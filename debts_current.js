// список долгов:

// к 16/04
// завершить учебный проект по VUE (от ulbi):

// + пофиксить зажатый лкм в модалке
//   реализовать debounce
//   кастомная пагинация (кол-во страниц, кол-во постов на странице),
// + досмотреть видос улби (осталось 10 минут) про composition API
//   начать читать документацию (желательно англ)

// ________________________________________________________________

// Разниц а spa и ssr
// SPA (Single Page Application) и SSR (Server Side Rendering) - это два различных подхода к разработке веб-приложений.
// SPA - это приложение, которое загружается один раз в браузере и после этого обновляет содержимое без перезагрузки страницы.
// SPA работает на стороне клиента и использует JavaScript для загрузки данных и взаимодействия с сервером.
// Поскольку весь контент генерируется на стороне клиента, SPA может обеспечить очень быструю и плавную пользовательскую интерфейс.
// SSR - это подход, при котором сервер генерирует HTML-код для каждой страницы при каждом запросе клиента.
// В отличие от SPA, который загружает пустую страницу и затем динамически добавляет контент на стороне клиента,
// SSR возвращает полностью отрендеренную страницу с сервера. SSR может быть полезен в тех случаях,
// когда требуется SEO-оптимизация или когда у вас есть большое количество контента, которое требуется загрузить.
// Основная разница между SPA и SSR заключается в том, что SPA загружает весь код на стороне клиента и обновляет содержимое
// без перезагрузки страницы, а SSR генерирует HTML-код на сервере и отправляет его на клиент.
// Оба подхода имеют свои преимущества и недостатки, и выбор подхода зависит от конкретных требований вашего проекта.

// _________________________________________________________________

// V intersection че делает и как устроено
// _________________________________________________________________

// Приоритет миксинов и обычного кода с такими же методами

// В Vue.js миксины (mixins) имеют более высокий приоритет, чем обычный код компонента. Когда компонент использует несколько миксинов,
// их методы и свойства объединяются в единое пространство имен (namespace), и при конфликтах используется следующий приоритет:

// 1. Методы и свойства внутри компонента имеют наивысший приоритет и переопределяют любые методы и свойства миксинов.
// 2. Методы и свойства внутри последнего добавленного миксина имеют приоритет над методами и свойствами в предыдущих миксинах.
// 3. Если в нескольких миксинах объявлен одинаковый метод или свойство, то используется версия из последнего добавленного миксина.
// 4. Если несколько миксинов имеют одинаковый хук (hook), то они вызываются в порядке добавления миксинов, начиная с самого первого.
// При использовании миксинов важно следить за порядком их добавления в компонент. Например, если вы хотите переопределить метод из миксина внутри компонента, то необходимо добавить миксин после определения метода в компоненте.

// _________________________________________________________________

// Альтернатива миксинам в Composition API

// В Composition API, вместо миксинов, используется функция defineComponent, которая позволяет определять компоненты с помощью функций.
// Внутри этих функций можно использовать хуки, которые предоставляются Composition API.

// Хуки представляют собой функции, которые позволяют компонентам использовать логику и состояние извне,
// а также переиспользовать их в различных компонентах. Хуки могут быть разделены на отдельные файлы и
// использоваться повторно в различных компонентах.

// _________________________________________________________________

// Что такое $router.push ('/posts) и как переписать его же в скрипт (в nav bar)

// $router в Vue.js - это объект маршрутизатора, который предоставляется Vue Router.
//  Vue Router - это официальный маршрутизатор для приложений Vue.js, который позволяет
//  создавать SPA с несколькими страницами и обеспечивает навигацию между этими страницами без перезагрузки страницы браузера.

// Объект $router позволяет получить доступ к методам маршрутизатора, таким как push, replace, go, back, forward,
// которые используются для навигации между страницами. Например,
// push используется для добавления нового маршрута в историю и перехода на новую страницу,
//  replace - для замены текущего маршрута на новый, без добавления новой записи в историю.

// Знак $ перед именем свойства или метода во Vue.js
// обычно означает, что это свойство или метод является частью API Vue и предоставляется самой библиотекой Vue.

// $emit, $on, $nextTick, $watch - это методы Vue,
// которые используются для работы с событиями, асинхронной обработки, отслеживания изменений и т.д.
// Они доступны в любом экземпляре Vue компонента и используются для управления его жизненным циклом.

// Также, $refs и $slots - это свойства, которые также являются частью API Vue и
// используются для доступа к дочерним компонентам и слотам в шаблоне.

// _________________________________________________________________

// старые долги:

// динамический импорт
// реэкспорт
// FSD (feature sliced design)
